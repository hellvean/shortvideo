<template>
  <div class="tabs">
    <div class="tabs-top">
      <div class="tabs-top-name">
        书籍订阅
      </div>
      <div class="tabs-top-addTask">
        <Button type="info" @click="modal">添加订阅</Button>
      </div>
    </div>
    <div class="groupinput">
      <div class="hang">
        <div class="flesx">
          <span class="qdName">书籍名称：</span>
          <Input v-model="bookName" placeholder="请输入书籍名称" class="qdselect"/>
        </div>
        <div class="flesx">
          <span class="qdName">公司名称：</span>
          <Input v-model="company" placeholder="请输入公司名" class="qdselect"/>
        </div>
        <div class="flesx">
          <span class="qdName">渠道名称：</span>
          <Input v-model="channel" placeholder="请输入渠道名" class="qdselect"/>
        </div>
      </div>
      <div class="hang">
        <div class="flesx">
          <span class="qdName">月份：</span>
          <DatePicker type="datetime" v-model="month" @on-change="handleChange1" format="yyyy-MM"
                      placeholder="请选择月份"
                      class="qdselect"></DatePicker>
          <!--<Input v-model="month" placeholder="请输入书籍名称" class="qdselect"/>-->
        </div>
        <div class="flesx">
          <Button type="primary" class="subtj" @click="bookList">查询</Button>
        </div>
        <div class="flesx">
        </div>
      </div>
    </div>
    <div class="table">
      <!--<Table :columns="columns" :data="booklists"></Table>-->
      <!--<Table border stripe :columns="columns" :data="data"></Table>-->
      <Table stripe :columns="columns" :data="booklists"></Table>
      <div class="pagediv">
        <Page :total="tots" :page-size="limit" show-elevator show-sizer :current="pages" :page-size-opts="sizes"
              show-total
              @on-change="pageChange" @on-page-size-change="pageSize"/>
      </div>
    </div>

    <Modal
      v-model="modal1"
      :title="tits"
      @on-ok=""
      @on-cancel="">
      <div class="table-task" v-bind="edit">
        <div class="task-cz">
          <span class="task-cz-name">
            书籍名称：
          </span>
          <Input prefix="ios-star" placeholder="书籍名称" v-model="edit.bookName" style="width: 200px"/>
        </div>
        <div class="task-cz">
          <span class="task-cz-name">
            书籍链接：
          </span>
          <Input prefix="ios-star" placeholder="书籍链接" v-model="edit.bookUrl" style="width: 200px"/>
        </div>
        <div class="task-cz">
          <span class="task-cz-name">
            月份：
          </span>
          <DatePicker type="date" :value="edit.month" @on-change="handleChange2" format="yyyy-MM"
                      placeholder="请选择月份"
                      class="qdselect" style="width: 200px"></DatePicker>
        </div>
        <div class="task-cz">
          <span class="task-cz-name">
            月任务数：
          </span>
          <Input prefix="ios-star" placeholder="月任务数" v-model="edit.taskNumberMonth" style="width: 200px"/>
        </div>
        <div class="task-cz">
          <span class="task-cz-name">
            日任务数：
          </span>
          <Input prefix="ios-star" placeholder="日任务数" v-model="edit.taskNumberDay" style="width: 200px"/>
        </div>
        <div class="task-cz">
          <span class="task-cz-name">
            价格(分)：
          </span>
          <Input prefix="ios-star" placeholder="价格（分）" v-model="edit.price" style="width: 200px"/>
        </div>
        <div class="task-cz">
          <span class="task-cz-name">
            线程数：
          </span>
          <Input prefix="ios-star" placeholder="线程数" v-model="edit.threadCount" style="width: 200px"/>
        </div>
        <div class="task-cz">
          <span class="task-cz-name">
            浏览比例(0.x)：
          </span>
          <!--<InputNumber prefix="ios-star"  v-model="edit.pvPercent" style="width: 200px"/>-->
          <InputNumber :max="1" :min="0" placeholder="浏览比例(0.x)"  v-model="edit.pvPercent" style="width: 200px"></InputNumber>
        </div>
        <div class="task-cz">
          <span class="task-cz-name">
            购买比例(0.x)：
          </span>
          <InputNumber :max="1" :min="0" placeholder="购买比例(0.x)"  v-model="edit.buyPercent" style="width: 200px"></InputNumber>
          <!--<Input :max="1" :min="0"  placeholder="购买比例(0.x)" v-model="edit.buyPercent"  style="width: 200px"/>-->
        </div>
        <div class="task-cz">
          <span class="task-cz-name">
            书籍id：
          </span>
          <Input prefix="ios-star"  placeholder="书籍id" v-model="edit.bookId" style="width: 200px"/>
        </div>
        <div class="task-cz">
          <span class="task-cz-name">
            章节id：
          </span>
          <Input prefix="ios-star"  placeholder="章节id" v-model="edit.chapterId" style="width: 200px"/>
        </div>
        <div class="task-cz">
          <span class="task-cz-name">
            用户表名：
          </span>
          <Input prefix="ios-star" placeholder="用户表名" v-model="edit.userTableName" style="width: 200px"/>
        </div>
        <div class="task-cz">
          <span class="task-cz-name">
            公司名称：
          </span>
          <Input prefix="ios-star" placeholder="公司名称" v-model="edit.company" style="width: 200px"/>
        </div>
        <div class="task-cz">
          <span class="task-cz-name">
            渠道名称：
          </span>
          <Input prefix="ios-star" placeholder="渠道名称" v-model="edit.channel" style="width: 200px"/>
        </div>
        <div class="task-cz">
          <span class="task-cz-name">
            计费类型：
          </span>
          <RadioGroup v-model="edit.feeType">
            <Radio label="0">按本</Radio>
            <Radio label="1">按章</Radio>
          </RadioGroup>
        </div>
        <div class="task-cz">
          <span class="task-cz-name">
            当前系统：
          </span>
          <Input prefix="ios-star" placeholder="当前系统" v-model="edit.currentSystem" style="width: 200px"/>
        </div>
        <div class="task-cz">
          <span class="task-cz-name">
            章节数量：
          </span>
          <Input prefix="ios-star" placeholder="章节数量" v-model="edit.chapterNum" style="width: 200px"/>
        </div>
        <div class="task-cz">
          <span class="task-cz-name">
            权重(越大优先)：
          </span>
          <Input prefix="ios-star" placeholder="权重" v-model="edit.weight" style="width: 200px"/>
        </div>
        <div class="task-cz">
          <span class="task-cz-name">
            状态：
          </span>
          <RadioGroup v-model="edit.state">
            <Radio label="0">否</Radio>
            <Radio label="1">是</Radio>
          </RadioGroup>
        </div>
      </div>
      <div slot="footer">
        <Button type="text" size="large" @click="cancel">取消</Button>
        <Button type="primary" size="large" @click="ok">确定</Button>
      </div>
    </Modal>

    <Modal
      title="提示"
      v-model="modal2"
      @on-ok="enableok"
      :styles="{top: '20px'}">
      <p>{{tit2}}</p>
    </Modal>
  </div>
</template>

<script>
  export default {
    name: 'bookOrder',
    data() {
      return {
        channel: '',
        company: '',
        bookName: '',
        month: '',
        columns: [
          {
            title: 'id',
            key: 'id',
            align: 'center',
          },
          {
            title: '书籍名称',
            key: 'bookName',
            align: 'center',
          },
          {
            title: '地址',
            key: 'bookUrl',
            align: 'center',
          },
          {
            title: '月份',
            key: 'month',
            align: 'center',
          },
          {
            title: '月任务数',
            key: 'taskNumberMonth',
            align: 'center',
          },
          {
            title: '日任务数',
            key: 'taskNumberDay',
            align: 'center',
          },
          {
            title: '线程数',
            key: 'threadCount',
            align: 'center',
          },
          {
            title: '浏览比例',
            key: 'pvPercent',
            align: 'center',
          },
          {
            title: '购买比例',
            key: 'buyPercent',
            align: 'center',
          },
          {
            title: '用户表名',
            key: 'userTableName',
            align: 'center',
          },
          {
            title: '公司名',
            key: 'company',
            align: 'center',
          },
          {
            title: '渠道名',
            key: 'channel',
            align: 'center',
          },
          {
            title: '计费类型',
            key: 'feeType',
            align: 'center',
            render: (h, params) => {
              const row = params.row;
              return h('div', [
                h('span', {}, this.filter(row.feeType)),
              ]);
            }
          },
          {
            title: '当前系统',
            key: 'currentSystem',
            align: 'center',
          },
          {
            title: '章节数量',
            key: 'chapterNum',
            align: 'center',
          },
          {
            title: '添加时间',
            key: 'addtime',
            align: 'center',
            render: (h, params) => {
              const row = params.row;
              return h('div', [
                h('span', {}, this.timeStamp(row.addtime / 1000)),
              ]);
            }
          },
          {
            title: '操作',
            key: 'key',
            width: 150,
            align: 'center',
            render: (h, params) => {
              if (params.row.state == 1) {
                return h('div', [
                  h('Button', {
                    props: {
                      type: 'primary',
                      size: 'small'
                    },
                    style: {
                      marginRight: '5px'
                    },
                    on: {
                      click: () => {
                        this.editbook(params)
                      }
                    }
                  }, '编辑'),
                  h('Button', {
                    props: {
                      type: 'error',
                      size: 'small'
                    },
                    style: {
                      marginRight: '5px'
                    },
                    on: {
                      click: () => {
                        this.bookDisable(params)
                      }
                    }
                  }, '禁用'),
                ])
              } else {
                return h('div', [
                  h('Button', {
                    props: {
                      type: 'primary',
                      size: 'small'
                    },
                    style: {
                      marginRight: '5px'
                    },
                    on: {
                      click: () => {
                        this.editbook(params)
                      }
                    }
                  }, '编辑'),
                  h('Button', {
                    props: {
                      type: 'success',
                      size: 'small'
                    },
                    style: {
                      marginRight: '5px'
                    },
                    on: {
                      click: () => {
                        this.bookEnable(params)
                      }
                    }
                  }, '启用'),
                ])
              }
            }
          }
        ],
        booklists: [],
        edit: {
          bookName: '',
          bookUrl: '',
          month: '',
          taskNumberMonth: '',
          taskNumberDay: '',
          price: '',
          threadCount: '',
          pvPercent: '',
          buyPercent: '',
          bookId: '',
          chapterId: '',
          userTableName: '',
          company: '',
          channel: '',
          feeType: '',
          currentSystem: '',
          chapterNum: '',
          weight: '',
          state: ''
        },
        tots: 0,
        limit: 10,
        page: 1,
        pages: 1,
        sizes: [10, 20, 30, 50, 80, 100],
        tures: false,
        modal1: false,
        tits: '',
        addAndedit: false,
        modal2:false,
        tit2:'',
        enableId:'',
        enableif:false,
        editId:'',
        fs:false,
      }
    },
    mounted() {
      this.bookList()
    },
    created() {

    },
    watch: {
      'edit.pvPercent': {//深度监听，可监听到对象、数组的变化
        handler(val, oldVal) {
          if(val>1){
            this.$Notice.warning({
              title: '提示',
              desc: '比例应该小于等于1'
            });
            return false;
          }else{
            this.edit.pvPercent = val.toFixed(2)
            this.edit.buyPercent = parseFloat(1-val).toFixed(2);
          }
          console.log("edit.value: " + val, oldVal);//但是这两个值打印出来却都是一样的
        },
        deep: true
      },
      'edit.buyPercent': {//深度监听，可监听到对象、数组的变化
        handler(val, oldVal) {
          if(val>1){
            this.$Notice.warning({
              title: '提示',
              desc: '比例应该小于等于1'
            });
            return false;
          }else{
           this.edit.buyPercent = val.toFixed(2);
            this.edit.pvPercent = parseFloat(1-val).toFixed(2);
          }
          // console.log("edit.value: " + val, oldVal);//但是这两个值打印出来却都是一样的
        },
        deep: true
      },
    },
    methods: {
      filter:function(i){
        if(i == 0){
          return '按本';
        }else if (i==1){
          return '按章';
        }
      },
      enableok:function(){
        if(this.enableif){
          this.$http({
            method: 'put',
            url: this.url + '/v1/bookOrderTask/updateBookState/'+this.enableId+'/1',
            success: ((res) => {
              // console.log(res)
              if (res.data.code == 20000) {
                this.$Message.success('启用成功');
                this.bookList()
              } else {
                this.$Message.warning(res.data.msg);
              }
            }),
            error: function (err) {
              console.log(err);
            }
          })
        }else{
          this.$http({
            method: 'put',
            url: this.url + '/v1/bookOrderTask/updateBookState/'+this.enableId+'/0',
            success: ((res) => {
              // console.log(res)
              if (res.data.code == 20000) {
                this.$Message.success('禁用成功');
                this.bookList()
              } else {
                this.$Message.warning(res.data.msg);
              }
            }),
            error: function (err) {
              console.log(err);
            }
          })
        }
      },
      bookEnable: function (da) {
        this.modal2 = true;
        this.tit2 = '你确定要启用吗？'
        this.enableId = da.row.id;
        this.enableif = true;
      },
      bookDisable: function (da) {
        this.modal2 = true;
        this.tit2 = '你确定要禁用吗？'
        this.enableId = da.row.id;
        this.enableif = false;
      },
      cancel: function () {
        this.modal1 = false;
      },
      ok: function () {
        // console.log(this.edit.month)
        if (this.edit.bookName == '') {
          this.$Notice.warning({
            title: '提示',
            desc: '请输入书籍名称'
          });
          return false;
        }
        if (this.edit.bookUrl == '') {
          this.$Notice.warning({
            title: '提示',
            desc: '请输入书籍链接'
          });
          return false;
        }
        if (this.edit.month == '') {
          this.$Notice.warning({
            title: '提示',
            desc: '请选择月份'
          });
          return false;
        }else{
          // this.edit.month = this.edit.month.getFullYear()+'-'+this.times(this.edit.month.getMonth())
        }
        if (this.edit.taskNumberMonth == '') {
          this.$Notice.warning({
            title: '提示',
            desc: '请输入月任务数'
          });
          return false;
        }
        if (this.edit.taskNumberDay== '') {
          this.$Notice.warning({
            title: '提示',
            desc: '请输入日任务数'
          });
          return false;
        }
        if (this.edit.price== '') {
          this.$Notice.warning({
            title: '提示',
            desc: '请输入价格'
          });
          return false;
        }
        if (this.edit.threadCount== '') {
          this.$Notice.warning({
            title: '提示',
            desc: '请输入线程数'
          });
          return false;
        }
        if (this.edit.pvPercent== '') {
          this.$Notice.warning({
            title: '提示',
            desc: '请输入浏览比例'
          });
          return false;
        }
        if (this.edit.buyPercent== '') {
          this.$Notice.warning({
            title: '提示',
            desc: '请输入购买比例'
          });
          return false;
        }
        // this.edit.pvPercent = parseFloat(this.edit.pvPercent);
        // this.edit.buyPercent = parseFloat(this.edit.buyPercent);
        // console.log(this.edit.pvPercent+this.edit.buyPercent)
        if((parseFloat(this.edit.pvPercent)+parseFloat(this.edit.buyPercent)) !=1){
          this.$Notice.warning({
            title: '提示',
            desc: '浏览比例和购买比例相加不为1'
          });
          return false;
        }
        if (this.edit.bookId== '') {
          this.$Notice.warning({
            title: '提示',
            desc: '请输入书籍id'
          });
          return false;
        }
        if (this.edit.chapterId== '') {
          this.$Notice.warning({
            title: '提示',
            desc: '请输入章节id'
          });
          return false;
        }
        if (this.edit.userTableName== '') {
          this.$Notice.warning({
            title: '提示',
            desc: '请输入用户表名'
          });
          return false;
        }
        if (this.edit.company== '') {
          this.$Notice.warning({
            title: '提示',
            desc: '请输入公司'
          });
          return false;
        }
        if (this.edit.channel== '') {
          this.$Notice.warning({
            title: '提示',
            desc: '请输入渠道'
          });
          return false;
        }
        if (this.edit.currentSystem== '') {
          this.$Notice.warning({
            title: '提示',
            desc: '请输入当前系统'
          });
          return false;
        }
        if (this.edit.chapterNum== '') {
          this.$Notice.warning({
            title: '提示',
            desc: '请输入章节数量'
          });
          return false;
        }
        if (this.edit.weight== '') {
          this.$Notice.warning({
            title: '提示',
            desc: '请输入权重'
          });
          return false;
        }
        this.modal1=false;
        if(this.fs){
          return false;
        }
        this.fs=true;
        // console.log(this.edit)
        if (this.addAndedit) {
          // console.log('添加')
          this.$http({
            method: 'post',
            url: this.url + '/v1/bookOrderTask/saveBookOrder',
            data:this.edit,
            success: ((res) => {
              // console.log(res)
              if (res.data.code == 20000) {
                this.$Message.success('添加成功');
                this.bookList()
              } else {
                this.$Message.warning(res.data.msg);
              }
            }),
            error: function (err) {
              console.log(err);
            }
          })
        } else {
          this.$http({
            method: 'put',
            url: this.url + '/v1/bookOrderTask/updateBookOrder/'+this.editId,
            data:this.edit,
            success: ((res) => {
              // console.log(res)
              if (res.data.code == 20000) {
                this.$Message.success('编辑成功');
                this.bookList()
              } else {
                this.$Message.warning(res.data.msg);
              }
            }),
            error: function (err) {
              console.log(err);
            }
          })
          // console.log('编辑')
        }
      },
      editbook: function (da) {
        this.modal1 = true;
        this.tits = '编辑书籍订阅';
        this.addAndedit = false;
        // console.log(da)
        let id = da.row.id;
        this.$http({
          method: 'get',
          url: this.url + '/v1/bookOrderTask/findBookOrder/' + id,
          success: ((res) => {
            // console.log(res)
            if (res.data.code == 20000) {
              let d = res.data.data;
              this.editId=d.id;
              this.edit.bookName = d.bookName;
              this.edit.bookUrl = d.bookUrl;
              this.edit.month = d.month;
              this.edit.taskNumberMonth = d.taskNumberMonth;
              this.edit.taskNumberDay = d.taskNumberDay;
              this.edit.price = d.price;
              this.edit.threadCount = d.threadCount;
              this.edit.pvPercent = d.pvPercent;
              this.edit.buyPercent = d.buyPercent;
              this.edit.bookId = d.bookId;
              this.edit.chapterId = d.chapterId;
              this.edit.userTableName = d.userTableName;
              this.edit.company = d.company;
              this.edit.channel = d.channel;
              this.edit.feeType = d.feeType.toString();
              this.edit.currentSystem = d.currentSystem;
              this.edit.chapterNum = d.chapterNum;
              this.edit.weight = d.weight;
              this.edit.state = d.state.toString();
              this.fs=false;
            } else {
              this.$Message.warning(res.data.msg);
            }
          }),
          error: function (err) {
            console.log(err);
          }
        })
      },
      handleChange1: function (e) {
        // this.month = e.getFullYear()+'-'+this.times(e.getMonth());
      },
      handleChange2: function (e) {
        this.edit.month=e;
      },
      pageChange: function (e) {
        this.page = e;
        this.tures = true;
        this.bookList();
      },
      pageSize: function (e) {
        this.limit = e;
        this.page = 1;
        this.bookList()
      },
      modal: function () {
        this.modal1 = true;
        this.tits = '添加书籍订阅';
        this.addAndedit = true;
        this.edit.bookName = '';
        this.edit.bookUrl='';
        this.edit.month = '';
        this.edit.taskNumberMonth = '';
        this.edit.taskNumberDay = '';
        this.edit.price = '';
        this.edit.threadCount = '';
        this.edit.pvPercent = '';
        this.edit.buyPercent = '';
        this.edit.bookId = '';
        this.edit.chapterId = '';
        this.edit.userTableName = '';
        this.edit.company = '';
        this.edit.channel = '';
        this.edit.feeType = '0';
        this.edit.currentSystem = '';
        this.edit.chapterNum = '';
        this.edit.weight = '';
        this.edit.state = '0';
        this.fs=false;
      },
      times: function (i) {
        if (i < 10) {
          return "0" + i
        } else {
          return i;
        }
      },
      bookList: function () {
        if (this.tures) {
          this.pages = this.page
        } else {
          this.pages = 1;
        }
        let t;
        if (this.month == '') {
          t = '';
        } else {
          t = this.month.getFullYear() + '-' + this.times(this.month.getMonth() + 1)
        }
        this.$http({
          method: 'get',
          url: this.url + '/v1/bookOrderTask/findBookOrderList?page=' + this.page + '&limit=' + this.limit + '&month=' + t + '&bookName=' + this.bookName + '&company=' + this.company + '&channel=' + this.channel,
          success: ((res) => {
            // console.log(res)
            if (res.data.code == 20000) {
              this.tots = res.data.count;
              this.booklists = res.data.data;
              this.page = 1;
              this.tures = false;
              // console.log(this.booklists)
            } else if (res.data.code == 20003) {
              this.tots = 0;
              this.booklists = [];
              this.tures = false;
            } else if (res.data.code == 4001) {
              this.$router.push({path: '/login'});
            } else {
              this.$Message.warning(res.data.msg);
            }
          }),
          error: function (err) {
            console.log(err);
          }
        })
      }
    }
  }
</script>

<style scoped lang='less'>
  .table {
    margin-top: 30px;
  }

  .groupinput {
    /*display: flex;*/
    padding-top: 20px;
    /*padding:0px 0 10px 30px;*/
  }

  .hang {
    display: flex;
    width: 100%;
    overflow: hidden;
    margin-bottom: 12px;
    .flesx {
      flex: 1;
    }
    .qdName {
      display: block;
      float: left;
      line-height: 30px;
      width: 100px;
      text-align: right;
      letter-spacing: 2px;
    }
    .qdselect, .start {
      display: block;
      float: left;
      width: 200px;
      margin-right: 30px;
    }
  }

  .pagediv {
    margin: 30px 0 0 30px;
  }

  .ivu-input {
    width: 100% !important;
  }

  .tabs {
    width: 100%;
    height: 100%;
    background-color: #f6f6f6;
    padding: 10px;
    .tabs-top {
      width: 100%;
      height: 50px;
      line-height: 40px;
      border-bottom: 1px solid #cccccc;
      margin-bottom: 10px;
      .tabs-top-name {
        font-size: 18px;
        float: left;
      }
      .tabs-top-addTask {
        float: right;
      }
    }
  }

  .table-task {
    .task-cz {
      margin-bottom: 8px;
      .task-cz-name {
        width: 100px;
        text-align: right;
        display: inline-block;
      }
    }
  }
</style>

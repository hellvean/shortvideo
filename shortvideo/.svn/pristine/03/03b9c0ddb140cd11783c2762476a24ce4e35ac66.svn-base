<template>
  <div class="tabs">
    <div class="tabs-top">
      <div class="tabs-top-name">
        设备列表
      </div>
      <div class="tabs-top-addTask">
        <Button type="info" @click="adddevice">添加设备</Button>
      </div>
    </div>
    <div class="hang">
      <span class="qdName">设备号：</span>
      <Input v-model="device" placeholder="请输入设备号" class="qdselect"/>
      <span class="qdName">imsi：</span>
      <Input v-model="imei" placeholder="请输入imsi" class="qdselect"/>
      <Button type="primary" class="subtj" @click="deviceList">查询</Button>
    </div>
    <div>
      <Row>
        <Col span="4" v-for="item in devicelist">
          <div class="highs color1">设备号：{{item.deviceId}}</div>
          <div class="highs2 color2">imei: {{item.imei}}</div>
          <div class="highs3 color3">上次心跳时间：{{item.lastHeartTime}}</div>
        </Col>
      </Row>
      <div class="page">
        <Page :total="totals" show-sizer show-elevator show-total :page-size="limit" @on-change="pageChange" @on-page-size-change="pageSize"/>
      </div>
    </div>

    <Modal
      v-model="modals1"
      title="添加设备"
      @on-ok=""
      @on-cancel="">
      <div class="table-task" v-bind="addDevice">
        <div class="task-cz">
          <span class="task-cz-name">
            设备号：
          </span>
          <Input placeholder="开始区间输入数字" v-model="addDevice.deviceStart" style="width: auto"/>
          <Input placeholder="结束区间输入数字" v-model="addDevice.deviceEnd" style="width: auto"/>
        </div>
      </div>
      <div slot="footer">
        <Button type="text" size="large"  @click="device_cancel">取消</Button>
        <Button type="primary" size="large"  @click="device_ok">确定</Button>
      </div>
    </Modal>
  </div>
</template>

<script>
  export default {
    data() {
      return {
        devicelist: '',
        totals: 1,
        page: 1,
        device: '',
        imei: '',
        modals1: false,
        addDevice: {
          deviceEnd: 0,
          deviceStart: 0
        },
        limit:30,
      }
    },
    created() {
      this.deviceList()
    },
    methods: {
      pageSize:function(e){
        this.limit = e;
        this.deviceList()
      },
      device_ok: function () {
        if ((this.addDevice.deviceStart == '' || this.addDevice.deviceEnd == '')) {
          this.$Notice.warning({
            title: '提示',
            desc: '开始区间和结束区间不能为空'
          });
          return false;
        }
        if ((parseFloat(this.addDevice.deviceStart).toString() == 'NaN') || (parseFloat(this.addDevice.deviceEnd).toString() == 'NaN')) {
          this.$Notice.warning({
            title: '提示',
            desc: '区间值必须是数字'
          });
          return false;
        }
        if (this.addDevice.deviceStart > this.addDevice.deviceEnd) {
          this.$Notice.warning({
            title: '提示',
            desc: '开始区间必须小于结束区间'
          });
          return false;
        }
        this.modals1=false;
        this.$http({
          method: 'post',
          url: this.url + '/v1/deviceInfo/saveDeviceBatch?deviceStart=' + this.addDevice.deviceStart + '&deviceEnd=' + this.addDevice.deviceEnd,
          data: {},
          success: ((res) => {
            // console.log(res)
            if (res.data.code == 20000) {
              this.$Message.success('添加成功');
              this.deviceList()
            } else {
              this.$Message.warning(res.data.msg);
            }
          }),
          error: function (err) {
            console.log(err);
          },
        })
      },
      device_cancel: function () {
        this.modals1=false;
      },
      pageChange: function (e) {
        this.page = e;
        this.deviceList()
      },
      adddevice: function () {
        this.addDevice.deviceStart = '';
        this.addDevice.deviceEnd = '';
        this.modals1 = true;
      },
      times: function (time) {
        if (time == '') {
          return '';
        } else {
          var date = new Date(time * 1000);
          var Y = date.getFullYear() + '-';
          var M = (date.getMonth() + 1 < 10 ? '0' + (date.getMonth() + 1) : date.getMonth() + 1) + '-';
          var D = date.getDate() + ' ';
          var h = date.getHours() + ':';
          var m = date.getMinutes() + ':';
          var s = date.getSeconds();
          if (D < 10) {
            D = "0" + D;
          }
          return Y + M + D + h + m + s
        }
      },
      deviceList: function () {
        this.$http({
          method: 'get',
          url: this.url + '/v1/deviceInfo/findDeviceList?page=' + this.page + '&limit='+this.limit+'&device=' + this.device + '&imei=' + this.imei,
          data: {},
          success: ((res) => {
            // console.log(res)
            if (res.data.code == 20000) {
              this.totals = res.data.count;
              let da = res.data.data;
              let b = []
              for (let i = 0; i < da.length; i++) {
                let d = {};
                d.deviceId = da[i].deviceId;
                d.imei = da[i].imei;
                // console.log(da[i].lastHeartTime)
                d.lastHeartTime = this.times(da[i].lastHeartTime / 1000)
                b.push(d)
              }
              this.devicelist = b;
            } else {
              this.$Message.warning(res.data.msg);
            }
          }),
          error: function (err) {
            console.log(err);
          },
        })
      }
    }
  }
</script>

<style scoped lang="less">
  .tabs {
    width: 100%;
    height: 100%;
    background-color: #f6f6f6;
    padding: 10px;
    .tabs-top {
      width: 100%;
      height: 50px;
      line-height: 40px;
      border-bottom: 1px solid #cccccc;
      margin-bottom: 10px;
      .tabs-top-name {
        font-size: 14px;
        float: left;
      }
      .tabs-top-addTask {
        float: right;
      }
    }
  }

  .page {
    padding-top: 20px;
    background-color: #f6f6f6;
  }

  .table-task {
    .task-cz {
      margin-bottom: 8px;
      .task-cz-name {
        width: 100px;
        text-align: right;
        display: inline-block;
      }
    }
  }

  .hang {
    overflow: hidden;
    margin-top: 10px;
    margin-bottom: 10px;
    .qdName {
      display: block;
      float: left;
      line-height: 30px;
      width: 100px;
      text-align: right;
      letter-spacing: 2px;
    }
    .qdselect, .start {
      display: block;
      float: left;
      width: 200px;
      margin-right: 30px;
    }
  }

  .ivu-input {
    width: 100% !important;
  }

  .ivu-col-span-4:nth-child(odd) {
    padding-left: 10px;
    height: 90px;
    margin: 5px;
    border: 1px solid #cccccc;
    /*background-color: rgb(47,189,253);*/
    border-radius: 10px;
    color: #000000;
  }

  .ivu-col-span-4:nth-child(even) {
    padding-left: 10px;
    height: 90px;
    margin: 5px;
    border: 1px solid #cccccc;
    /*background-color: rgb(21,157,67);*/
    border-radius: 10px;
    color: #000000;
  }

  .bgc1 {
    background-color: #00cc66;
  }

  .highs2, .highs3 {
    height: 30px;
    /*line-height: 30px;*/
  }

  .color1 {
    color: #00c261;
  }

  .color2 {
    color: #2d8cf0;
  }

  .color3 {
    color: hotpink;
  }
</style>

<template>
  <div class="tabs">
    <div class="tabs-top">
      <div class="tabs-top-name">
        任务类型列表
      </div>
      <div class="tabs-top-addTask">
        <Button type="info" @click="modal">添加任务类型</Button>
      </div>
    </div>
    <div class="hang">
      <div class="flesx">
        <span class="qdName">类型名称：</span>
        <Input v-model="typeName" placeholder="请输入类型名称" class="qdselect"/>
      </div>
      <!--<div class="flesx">-->
        <!--<span class="qdName">冲突应用：</span>-->
        <!--<Input v-model="needUninstallApp" placeholder="请输入冲突应用" class="qdselect"/>-->
      <!--</div>-->
      <div class="flesx">
        <Button type="primary" class="subtj" @click="taskList">查询</Button>
      </div>
      <div class="flesx">
      <span class="qdName" style="display: none">冲突应用：</span>
      <Input v-model="needUninstallApp" placeholder="请输入冲突应用" class="qdselect" style="display: none"/>
      </div>
    </div>
    <Table border stripe :columns="columns" :data="data"></Table>
    <div class="page">
      <Page :total="tots" show-elevator show-total show-sizer :current="pages" :page-size-opts="sizes"  :page-size="limit"
            @on-change="pageChange" @on-page-size-change="pageSize"/>
    </div>
    <Modal
      v-model="modal1"
      :title="tits"
      @on-ok=""
      @on-cancel="">
      <div class="table-task" v-bind="edit">
        <div class="task-cz" v-show="idshow">
          <span class="task-cz-name">
            id：
          </span>
          <Input prefix="ios-star" disabled placeholder="id" v-model="edit.id" style="width: auto"/>
        </div>
        <div class="task-cz">
          <span class="task-cz-name">
            类型名称：
          </span>
          <Input prefix="ios-star" placeholder="类型名称" v-model="edit.typeName" style="width: auto"/>
        </div>
        <div class="task-cz">
          <span class="task-cz-name">
            书籍类型：
          </span>
          <RadioGroup v-model="edit.bookType">
            <!--<RadioGroup v-model="model10">-->
            <Radio label="0">无</Radio>
            <Radio label="1">按本</Radio>
            <Radio label="2">按章</Radio>
            <Radio label="3">按本和章</Radio>
          </RadioGroup>
        </div>
        <div class="task-cz">
          <span class="task-cz-name">
            需要书籍：
          </span>
          <RadioGroup v-model="edit.bookPayState" @on-change="bookChange">
            <Radio label="0">否</Radio>
            <Radio label="1">是</Radio>
          </RadioGroup>
        </div>
        <div class="task-cz">
          <span class="task-cz-name">
            需要音乐：
          </span>
          <RadioGroup v-model="edit.musicState" @on-change="musicChange">
            <Radio label="0">否</Radio>
            <Radio label="1">是</Radio>
          </RadioGroup>
        </div>
        <div class="task-cz">
          <span class="task-cz-name">
            需要视频：
          </span>
          <RadioGroup v-model="edit.videoState" @on-change="videoChange">
            <Radio label="0">否</Radio>
            <Radio label="1">是</Radio>
          </RadioGroup>
        </div>
        <div class="task-cz">
          <span class="task-cz-name">
            任务类型：
          </span>
          <RadioGroup v-model="edit.typeCode">
            <!--<RadioGroup v-model="model10">-->
            <Radio label="0">随机</Radio>
            <Radio label="1">需要账号</Radio>
          </RadioGroup>
        </div>
        <div class="task-cz">
          <span class="task-cz-name">
            支付类型：
          </span>
          <Input placeholder="支付类型" v-model="edit.payType" style="width: auto"/>
        </div>
        <!--<div class="task-cz">-->
          <!--<span class="task-cz-name">-->
            <!--冲突应用：-->
          <!--</span>-->
          <!--<Input placeholder="支付类型" v-model="edit.needUninstallApp" style="width: auto"/>-->
        <!--</div>-->
        <div class="task-cz">
          <span class="task-cz-name">
            用户表名：
          </span>
          <Input placeholder="用户表名" v-model="edit.userDataTable" style="width: auto"/>
        </div>
        <div class="task-cz">
          <span class="task-cz-name">
            任务逻辑：
          </span>
          <Select v-model="edit.logicalFileId" filterable style="width:200px">
            <Option v-for="item in rwljList" :value="item.id" :key="item.id">{{ item.name }}</Option>
          </Select>
        </div>
        <div class="task-cz">
          <span class="task-cz-name">
            冲突应用：
          </span>
          <Input placeholder="冲突应用" v-model="edit.needUninstallApp" style="width:350px;"/>
        </div>
        <div class="task-cz">
          <span class="task-cz-name">
            APP逻辑：
          </span>
          <Select v-model="edit.appLogicalIds" filterable multiple style="width:350px">
            <Option v-for="item in appList" :value="item.id" :key="item.id">{{ item.name }}</Option>
          </Select>
        </div>
      </div>
      <div slot="footer">
        <Button type="text" size="large" @click="cancel">取消</Button>
        <Button type="primary" size="large" @click="ok">确定</Button>
      </div>
    </Modal>

    <Modal
      title="提示"
      v-model="modal2"
      @on-ok="deletes"
      :styles="{top: '20px'}">
      <p>你确定要删除吗？</p>
    </Modal>
  </div>
</template>

<script>
  export default {
    name: 'taskType',
    data() {
      return {
        typeName: '',
        needUninstallApp:'',
        modal1: false,
        modal2: false,
        deleteId: '',
        tits: '',
        idshow: false,
        page: 1,
        limit: 10,
        sizes: [10, 20, 30, 50, 80, 100],
        edit: {
          id: '',
          typeName: '',
          userDataTable: '',
          typeCode: '0',
          logicalFileId: '',
          // channelId: '',
          appLogicalIds: '',
          bookType: '0',
          payType: '',
          bookPayState: '0',
          musicState: '0',
          videoState: '0',
          needUninstallApp:'',
        },
        model1: '',
        // model10: 0,
        model2: '',
        model3: '',
        rwljList: [],
        qdList: [],
        appList: [],
        columns: [
          {
            title: '类型id',
            key: 'id',
            // width:'auto',
            // width: 150,
            align: 'center'
          },
          {
            title: '任务类型',
            key: 'typeCode',
            align: 'center',
            render: (h, params) => {
              const row = params.row;
              return h('div', [
                h('span', {}, this.filter(row.typeCode)),
              ]);
            }
          },
          {
            title: '类型名称',
            key: 'typeName',
            align: 'center'
          },
          {
            title: '用户表名',
            key: 'userDataTable',
            align: 'center'
          },
          {
            title: '任务逻辑',
            key: 'logicalFileName',
            align: 'center'
          },
          {
            title: '支付类型',
            key: 'payType',
            align: 'center'
          },
          {
            title: '书籍类型',
            key: 'bookType',
            align: 'center',
            render: (h, params) => {
              const row = params.row;
              return h('div', [
                h('span', {}, this.filter1(row.bookType)),
              ]);
            }
          },
          {
            title: '可用用户数',
            key: 'usableUserCount',
            align: 'center'
          },
          {
            title: '添加时间',
            key: 'addtime',
            align: 'center',
            render: (h, params) => {
              const row = params.row;
              return h('div', [
                h('span', {}, this.timeStamp(row.addtime / 1000)),
              ]);
            }
          },
          {
            title: 'APP详细信息',
            key: 'id',
            // width: 150,
            align: 'center',
            render: (h, params) => {
              return h('div', [
                h('Button', {
                  props: {
                    type: 'primary',
                    size: 'small'
                  },
                  style: {
                    marginRight: '5px'
                  },
                  on: {
                    click: () => {
                      this.lookAppDetails(params.row.id)
                    }
                  }
                }, '查看'),
              ]);
            }
          },
          {
            title: '操作',
            key: 'action',
            width: 140,
            align: 'center',
            render: (h, params) => {
              return h('div', [
                h('Button', {
                  props: {
                    type: 'primary',
                    size: 'small'
                  },
                  style: {
                    marginRight: '5px'
                  },
                  on: {
                    click: () => {
                      this.show(params.row.id)
                    }
                  }
                }, '编辑'),
                // h('Button', {
                //   props: {
                //     type: 'error',
                //     size: 'small'
                //   },
                //   on: {
                //     click: () => {
                //       this.delete(params.row.id)
                //     }
                //   }
                // }, '删除')
              ]);
            }
          }
        ],
        data: [],
        tots: 0,
        pages:1,
        tures:false,
      }
    }
    ,
    created() {
      this.taskList();
      this.logicalFileId();
      this.appLogicalIds();
    },
    methods: {
      bookChange:function(){
        // console.log('book改变了')
        // console.log(this.edit.bookPayState);
        if(this.edit.bookPayState =='1'){
          this.edit.musicState = '0';
          this.edit.videoState = '0';
        }
      },
      musicChange:function(){
        // console.log('book改变了')
        if(this.edit.musicState =='1'){
          this.edit.bookPayState = '0';
          this.edit.videoState = '0';
        }
      },
      videoChange:function(){
        // console.log('book改变了')
        if(this.edit.videoState =='1'){
          this.edit.musicState = '0';
          this.edit.bookPayState = '0';
        }
      },
      pageSize: function (e) {
        // console.log(e)
        this.limit = e;
        this.page = 1;
        this.taskList();
      },
      lookAppDetails: function (i) {
        // console.log(i)
        this.$router.push({path: '/appDetailed/' + i});
      },
      delete: function (i) {
        this.modal2 = true;
        this.deleteId = i;
      },
      deletes: function () {
        this.$http({
          method: 'put',
          url: this.url + '/v1/taskType/updateTaskTypeState/' + this.deleteId + '/0',
          data: {},
          success: ((res) => {
            // console.log(res);
            if (res.data.code == 20000) {
              this.$Message.success('删除成功');
              this.taskList();
            } else if (res.data.code == 4001) {
              this.$router.push({path: '/login'});
            }
          })
        })
      },
      logicalFileId: function () {
        this.$http({
          method: 'get',
          url: this.url + '/v1/appLogical/findTaskLogicalSel',
          data: {},
          success: ((res) => {
            // console.log(res);
            if (res.data.code == 20000) {
              this.rwljList = res.data.data;
            } else if (res.data.code == 4001) {
              this.$router.push({path: '/login'});
            }
          })
        })
      },
      channelId: function () {
        this.$http({
          method: 'get',
          url: this.url + '/v1/channel/findChannelSel?companyId=',
          data: {},
          success: ((res) => {
            // console.log(res);
            if (res.data.code == 20000) {
              this.qdList = res.data.data;
            } else if (res.data.code == 4001) {
              this.$router.push({path: '/login'});
            }
          })
        })
      },
      appLogicalIds: function () {
        this.$http({
          method: 'get',
          url: this.url + '/v1/appLogical/findAppLogicalSel',
          data: {},
          success: ((res) => {
            // console.log(res);
            if (res.data.code == 20000) {
              this.appList = res.data.data;
            } else if (res.data.code == 4001) {
              this.$router.push({path: '/login'});
            }
          })
        })
      },
      filter: function (i) {
        if (i == 1) {
          return '需要账号'
        } else {
          return '随机'
        }
      },
      filter1: function (i) {
        if (i == 0) {
          return '无'
        } else if (i == 1) {
          return '按本'
        } else if (i == 2) {
          return '按章'
        } else if (i == 3) {
          return '按本和章'
        }
      },
      taskList: function () {
        if(this.tures){
          this.pages = this.page
        }else{
          this.pages = 1;
        }
        this.$http({
          method: 'get',
          url: this.url + '/v1/taskType/findTaskTypeList?page=' + this.page + '&limit=' + this.limit + '&typeName=' + this.typeName+'&needUninstallApp='+this.needUninstallApp,
          data: {},
          success: ((res) => {
            // console.log(res);
            if (res.data.code == 20000) {
              this.tots = res.data.count;
              this.data = res.data.data;
              this.page = 1;
              this.tures = false;
            } else if (res.data.code == 20003) {
              this.tots = 0;
              this.data = [];
              this.tures = false;
            } else if (res.data.code == 4001) {
              this.$router.push({path: '/login'});
            } else {
              this.$Message.warning(res.data.msg);
            }
          })
        })
      },
      pageChange: function (e) {
        this.page = e;
        this.tures = true;
        this.taskList()
      },
      ok() {
        // console.log(this.edit)

        if (this.edit.typeName == '') {
          this.$Notice.warning({
            title: '提示',
            desc: '请输入类型名称'
          });
          return false;
        }
        if (this.edit.bookPayState == 1) {
          if (this.edit.typeCode != 1) {
            this.$Notice.warning({
              title: '提示',
              desc: '需要书籍为是的情况下，任务类型必须为需要账号，请重新选择'
            });
            return false;
          }
        }
        if (this.edit.musicState == 1) {
          if (this.edit.typeCode != 1) {
            this.$Notice.warning({
              title: '提示',
              desc: '需要音乐为是的情况下，任务类型必须为需要账号，请重新选择'
            });
            return false;
          }
        }
        if (this.edit.videoState == 1) {
          if (this.edit.typeCode != 1) {
            this.$Notice.warning({
              title: '提示',
              desc: '需要视频为是的情况下，任务类型必须为需要账号，请重新选择'
            });
            return false;
          }
        }
        // console.log()
        if (this.edit.typeCode == 1) {
          if (this.edit.userDataTable == '') {
            this.$Notice.warning({
              title: '提示',
              desc: '请输入用户表名'
            });
            return false;
          }
        }
        if (this.edit.logicalFileId == '') {
          this.$Notice.warning({
            title: '提示',
            desc: '请选择任务逻辑'
          });
          return false;
        }
        if (this.edit.appLogicalIds == '') {
          this.$Notice.warning({
            title: '提示',
            desc: '请选择app逻辑'
          });
          return false;
        }
        this.modal1 = false;
        if (this.idshow) {
          // console.log('编辑')
          // console.log(this.edit);
          let da = this.edit.id
          delete this.edit.id;
          // console.log(da)
          this.$http({
            method: 'put',
            url: this.url + '/v1/taskType/updateTaskType/' + da,
            data: this.edit,
            success: ((res) => {
              // console.log(res);
              if (res.data.code == 20000) {
                this.$Message.success('编辑成功');
                this.taskList();
              } else if (res.data.code == 4001) {
                this.$router.push({path: '/login'});
              }
            }),
            error: function (err) {
              console.log(err);
            },
          })
        } else {
          // console.log('添加')
          // console.log(this.edit);
          this.$http({
            method: 'post',
            url: this.url + '/v1/taskType/saveTaskType',
            data: this.edit,
            success: ((res) => {
              // console.log(res);
              if (res.data.code == 20000) {
                this.$Message.success('添加成功');
                this.taskList();
              } else if (res.data.code == 4001) {
                this.$router.push({path: '/login'});
              }
            }),
            error: function (err) {
              console.log(err);
            },
          })
        }
      },
      cancel() {
        this.modal1 = false;
        this.$Message.info('Clicked cancel');
      },
      show(i) {
        this.idshow = true;
        this.tits = '编辑任务类型'
        this.modal1 = true;
        this.$http({
          method: 'get',
          url: this.url + '/v1/taskType/findTaskType/' + i,
          data: {},
          success: ((res) => {
            // console.log(res)
            if (res.data.code == 20000) {
              let da = res.data.data;
              this.edit.appLogicalIds = [];
              this.edit.id = da.id;
              this.edit.typeName = da.typeName;
              this.edit.userDataTable = da.userDataTable;
              this.edit.typeCode = da.typeCode.toString();
              this.edit.bookType = da.bookType.toString();
              this.edit.bookPayState = da.bookPayState.toString();
              this.edit.musicState = da.musicState.toString()
              this.edit.videoState = da.videoState.toString()
              this.edit.payType = da.payType;
              this.edit.needUninstallApp = da.needUninstallApp;
              this.edit.logicalFileId = da.logicalFileId;
              // this.edit.appLogicalIds = da.appLogicalList;
              // console.log(this.edit)
              for (let i = 0; i < da.appLogicalList.length; i++) {
                if (typeof da.appLogicalList[i].id != 'undefined') {
                  this.edit.appLogicalIds.push(da.appLogicalList[i].id)
                }
              }
              // console.log(this.edit.appLogicalIds)
            } else if (res.data.code == 4001) {
              this.$router.push({path: '/login'});
            }
          }),
          error: function (err) {
            console.log(err);
          },
        })
      },
      modal() {
        this.edit.typeName = '';
        this.edit.userDataTable = '';
        this.edit.typeCode = '0';
        this.edit.logicalFileId = '';
        // this.edit.channelId = '',
        this.edit.appLogicalIds = '';
        this.edit.bookType = '0';
        this.edit.bookPayState = '0';
        this.edit.musicState = '0';
        this.edit.videoState = '0';
        this.edit.payType = '';
        this.edit.needUninstallApp='';
        this.idshow = false;
        this.tits = '添加任务类型';
        this.modal1 = true;

      }
    }
  }
</script>

<style scoped lang="less">
  .tabs {
    width: 100%;
    height: 100%;
    background-color: #f6f6f6;
    padding: 10px;
    .tabs-top {
      width: 100%;
      height: 50px;
      line-height: 40px;
      border-bottom: 1px solid #cccccc;
      margin-bottom: 10px;
      /*border-bottom: 1px solid #cccccc;*/
      .tabs-top-name {
        font-size: 14px;
        float: left;
      }
      .tabs-top-addTask {
        float: right;
      }
    }
  }

  .page {
    padding-top: 20px;
  }

  .table-task {
    .task-cz {
      margin-bottom: 8px;
      .task-cz-name {
        width: 100px;
        text-align: right;
        display: inline-block;
      }
    }
  }

  .hang {
    display: flex;
    width: 100%;
    overflow: hidden;
    margin-bottom: 12px;
    .flesx {
      flex: 1;
    }
    .qdName {
      display: block;
      float: left;
      line-height: 30px;
      width: 100px;
      text-align: right;
      letter-spacing: 2px;
    }
    .qdselect, .start {
      display: block;
      float: left;
      width: 200px;
      margin-right: 30px;
    }
  }

  .ivu-input {
    width: 100% !important;
  }
</style>

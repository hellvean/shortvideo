<template>
  <div class="tabs">
    <div class="tabs-top">
      <div class="tabs-top-name">
        任务类型列表
      </div>
      <div class="tabs-top-addTask">
        <Button type="info" @click="modal">添加任务类型</Button>
      </div>
    </div>
    <div class="hang">
      <span class="qdName">类型名称：</span>
      <Input v-model="typeName" placeholder="请输入类型名称" class="qdselect"/>
      <Button type="primary" class="subtj" @click="taskList">查询</Button>
    </div>
    <Table border stripe :columns="columns" :data="data"></Table>
    <div class="page">
      <Page :total="tots" show-elevator show-total show-sizer :page-size-opts="sizes" :page-size="limit" @on-change="pageChange" @on-page-size-change="pageSize"/>
    </div>
    <Modal
      v-model="modal1"
      :title="tits"
      @on-ok=""
      @on-cancel="">
      <div class="table-task" v-bind="edit">
        <div class="task-cz" v-show="idshow">
          <span class="task-cz-name">
            id：
          </span>
          <Input prefix="ios-star" disabled placeholder="id" v-model="edit.id" style="width: auto"/>
        </div>
        <div class="task-cz">
          <span class="task-cz-name">
            类型名称：
          </span>
          <Input prefix="ios-star" placeholder="类型名称" v-model="edit.typeName" style="width: auto"/>
        </div>
        <div class="task-cz">
          <span class="task-cz-name">
            用户表名：
          </span>
          <Input prefix="ios-star" placeholder="用户表名" v-model="edit.userDataTable" style="width: auto"/>
        </div>
        <div class="task-cz">
          <span class="task-cz-name">
            任务类型：
          </span>
          <RadioGroup v-model="edit.typeCode">
            <!--<RadioGroup v-model="model10">-->
            <Radio label="0">随机</Radio>
            <Radio label="1">需要账号</Radio>
          </RadioGroup>
        </div>
        <div class="task-cz">
          <span class="task-cz-name">
            任务逻辑：
          </span>
          <Select v-model="edit.logicalFileId" filterable style="width:200px">
            <Option v-for="item in rwljList" :value="item.id" :key="item.id">{{ item.name }}</Option>
          </Select>
        </div>
        <!--<div class="task-cz">-->
        <!--<span class="task-cz-name">-->
        <!--渠道名称：-->
        <!--</span>-->
        <!--<Select v-model="edit.channelId" style="width:200px">-->
        <!--<Option v-for="item in qdList" :value="item.id" :key="item.id">{{ item.name }}</Option>-->
        <!--</Select>-->
        <!--</div>-->
        <div class="task-cz">
          <span class="task-cz-name">
            APP逻辑：
          </span>
          <Select v-model="edit.appLogicalIds" filterable multiple style="width:350px">
            <Option v-for="item in appList" :value="item.id" :key="item.id">{{ item.name }}</Option>
          </Select>
        </div>
      </div>
      <div slot="footer">
        <Button type="text" size="large"  @click="cancel">取消</Button>
        <Button type="primary" size="large"  @click="ok">确定</Button>
      </div>
    </Modal>

    <Modal
      title="提示"
      v-model="modal2"
      @on-ok="deletes"
      :styles="{top: '20px'}">
      <p>你确定要删除吗？</p>
      <!--<p>Content of dialog</p>-->
      <!--<p>Content of dialog</p>-->
    </Modal>
  </div>
</template>

<script>
  export default {
    data() {
      return {
        typeName:'',
        modal1: false,
        modal2:false,
        deleteId:'',
        tits: '',
        idshow: false,
        page: 1,
        limit:10,
        sizes:[10,20,30,50,80,100],
        edit: {
          id:'',
          typeName: '',
          userDataTable: '',
          typeCode: '',
          logicalFileId: '',
          // channelId: '',
          appLogicalIds: '',
        },
        model1: '',
        // model10: 0,
        model2: '',
        model3: '',
        rwljList: [],
        qdList: [],
        appList: [],
        columns: [
          {
            title: '类型id',
            key: 'id',
            // width:'auto',
            // width: 150,
            align: 'center'
          },
          {
            title: '任务类型',
            key: 'typeCode',
            align: 'center',
            render: (h, params) => {
              const row = params.row;
              return h('div', [
                h('span', {}, this.filter(row.typeCode)),
              ]);
            }
          },
          {
            title: '类型名称',
            key: 'typeName',
            align: 'center'
          },
          {
            title: '用户表名',
            key: 'userDataTable',
            align: 'center'
          },
          {
            title: '任务逻辑',
            key: 'logicalFileName',
            align: 'center'
          },
          // {
          //   title: '渠道名称',
          //   key: 'channelId',
          //   align: 'center'
          // },
          {
            title: '添加时间',
            key: 'addtime',
            align: 'center',
            render: (h, params) => {
              const row = params.row;
              return h('div', [
                h('span', {}, this.timeStamp(row.addtime / 1000)),
              ]);
            }
          },
          {
            title: 'APP详细信息',
            key: 'id',
            // width: 150,
            align: 'center',
            render: (h, params) => {
              return h('div', [
                h('Button', {
                  props: {
                    type: 'primary',
                    size: 'small'
                  },
                  style: {
                    marginRight: '5px'
                  },
                  on: {
                    click: () => {
                      this.lookAppDetails(params.row.id)
                    }
                  }
                }, '查看'),
              ]);
            }
          },
          {
            title: '操作',
            key: 'action',
            width: 140,
            align: 'center',
            render: (h, params) => {
              return h('div', [
                h('Button', {
                  props: {
                    type: 'primary',
                    size: 'small'
                  },
                  style: {
                    marginRight: '5px'
                  },
                  on: {
                    click: () => {
                      this.show(params.row.id)
                    }
                  }
                }, '编辑'),
                h('Button', {
                  props: {
                    type: 'error',
                    size: 'small'
                  },
                  on: {
                    click: () => {
                      this.delete(params.row.id)
                    }
                  }
                }, '删除')
              ]);
            }
          }
        ],
        data: [],
        tots: 0
      }
    }
    ,
    created() {
      this.taskList();
      this.logicalFileId();
      // this.channelId();
      this.appLogicalIds();
    },
    methods: {
      pageSize:function(e){
        this.limit = e;
        this.taskList();
      },
      lookAppDetails:function (i) {
        // console.log(i)
        // alert('sdsd')
        this.$router.push({path: '/appDetailed/'+i});
      },
      delete: function (i) {
        this.modal2 = true;
        this.deleteId = i;
      },
      deletes:function(){
        this.$http({
          method: 'put',
          url: this.url + '/v1/taskType/updateTaskTypeState/' + this.deleteId + '/0',
          data: {},
          success: ((res) => {
            // console.log(res);
            if (res.data.code == 20000) {
              this.$Message.success('删除成功');
              this.taskList();
            }
          })
        })
      },
      logicalFileId: function () {
        this.$http({
          method: 'get',
          url: this.url + '/v1/appLogical/findTaskLogicalSel',
          data: {},
          success: ((res) => {
            // console.log(res);
            if (res.data.code == 20000) {
              // this.tots =res.data.count;
              this.rwljList = res.data.data;
            }
          })
        })
      },
      channelId: function () {
        this.$http({
          method: 'get',
          url: this.url + '/v1/channel/findChannelSel?companyId=',
          data: {},
          success: ((res) => {
            // console.log(res);
            if (res.data.code == 20000) {
              // this.tots =res.data.count;
              this.qdList = res.data.data;
            }
          })
        })
      },
      appLogicalIds: function () {
        this.$http({
          method: 'get',
          url: this.url + '/v1/appLogical/findAppLogicalSel',
          data: {},
          success: ((res) => {
            // console.log(res);
            if (res.data.code == 20000) {
              // this.tots =res.data.count;
              this.appList = res.data.data;
            }
          })
        })
      },
      filter: function (i) {
        if (i == 1) {
          return '需要账号'
        } else {
          return '随机'
        }
      },
      taskList: function () {
        this.$http({
          method: 'get',
          url: this.url + '/v1/taskType/findTaskTypeList?page=' + this.page + '&limit='+this.limit+'&typeName='+this.typeName,
          data: {},
          success: ((res) => {
            // console.log(res);
            if (res.data.code == 20000) {
              this.tots = res.data.count;
              this.data = res.data.data;
            }
          })
        })
      },
      pageChange: function (e) {
        this.page = e;
        this.taskList()
      },
      ok() {
        // this.$Message.info('Clicked ok');
        // console.log(this.edit)

        if (this.edit.typeName == '') {
          this.$Notice.warning({
            title: '提示',
            desc: '请输入类型名称'
          });
          return false;
        }
        if (this.edit.userDataTable == '') {
          this.$Notice.warning({
            title: '提示',
            desc: '请输入用户表名'
          });
          return false;
        }
        if (this.edit.typeCode == '') {
          this.$Notice.warning({
            title: '提示',
            desc: '请选择任务类型'
          });
          return false;
        }
        if (this.edit.logicalFileId == '') {
          this.$Notice.warning({
            title: '提示',
            desc: '请选择任务逻辑'
          });
          return false;
        }
        if (this.edit.appLogicalIds == '') {
          this.$Notice.warning({
            title: '提示',
            desc: '请选择app逻辑'
          });
          return false;
        }
        this.modal1 = false;
        if (this.idshow) {
          // console.log('编辑')
          // console.log(this.edit);
          let da = this.edit.id
          delete this.edit.id;
          // console.log(da)
          this.$http({
            method: 'put',
            url: this.url + '/v1/taskType/updateTaskType/'+da,
            data: this.edit,
            success: ((res) => {
              // console.log(res);
              if (res.data.code == 20000) {
                this.$Message.success('编辑成功');
                this.taskList();
              }
            }),
            error:function(err){
              console.log(err);
            },
          })
        } else {
          // console.log('添加')
          // console.log(this.edit);
          this.$http({
            method: 'post',
            url: this.url + '/v1/taskType/saveTaskType',
            data: this.edit,
            success: ((res) => {
              // console.log(res);
              if (res.data.code == 20000) {
                this.$Message.success('添加成功');
                this.taskList();
              }
            }),
            error:function(err){
              console.log(err);
            },
          })
        }
      },
      cancel() {
        this.modal1=false;
        this.$Message.info('Clicked cancel');
      },
      show(i) {
        this.idshow = true;
        this.tits = '编辑任务类型'
        this.modal1 = true;
        this.$http({
          method: 'get',
          url: this.url + '/v1/taskType/findTaskType/' + i,
          data: {},
          success: ((res) => {
            // console.log(res)
            if (res.data.code == 20000) {
              let da = res.data.data;
              this.edit.appLogicalIds='';
              this.edit.id = da.id;
              this.edit.typeName = da.typeName;
              this.edit.userDataTable = da.userDataTable;
              this.edit.typeCode = da.typeCode.toString();
              this.edit.logicalFileId = da.logicalFileId;
              this.edit.appLogicalIds = da.appLogicalList;
              // console.log(this.edit)
              for(let i=0;i<da.appLogicalList.length;i++){
                if(typeof da.appLogicalList[i].id !='undefined'){
                  this.edit.appLogicalIds.push(da.appLogicalList[i].id)
                }
              }
            }
          }),
          error:function(err){
          console.log(err);
        },
        })
      },
      modal() {
        this.edit.typeName = '';
          this.edit.userDataTable = '';
          this.edit.typeCode = '';
          this.edit.logicalFileId = '';
          // this.edit.channelId = '',
          this.edit.appLogicalIds = '';
          this.idshow = false;
        this.tits = '添加任务类型';
        this.modal1 = true;

      }
    }
  }
</script>

<style scoped lang="less">
  .tabs {
    width: 100%;
    height: 100%;
    background-color: #f6f6f6;
    padding: 10px;
    .tabs-top {
      width: 100%;
      height: 50px;
      line-height: 40px;
      border-bottom: 1px solid #cccccc;
      margin-bottom: 10px;
      /*border-bottom: 1px solid #cccccc;*/
      .tabs-top-name {
        font-size: 14px;
        float: left;
      }
      .tabs-top-addTask {
        float: right;
      }
    }
  }

  .page {
    padding-top: 20px;
  }

  .table-task {
    .task-cz {
      margin-bottom: 8px;
      .task-cz-name {
        width: 100px;
        text-align: right;
        display: inline-block;
      }
    }
  }
  .hang {
    overflow: hidden;
    margin-top: 10px;
    margin-bottom: 10px;
    .qdName {
      display: block;
      float: left;
      line-height: 30px;
      width: 100px;
      text-align: right;
      letter-spacing: 2px;
    }
    .qdselect, .start {
      display: block;
      float: left;
      width: 200px;
      margin-right: 30px;
    }
  }
  .ivu-input{
    width: 100%!important;
  }
</style>

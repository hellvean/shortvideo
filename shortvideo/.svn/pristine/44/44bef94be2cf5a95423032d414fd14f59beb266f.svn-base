<template>
  <div class="tabs">
    <div class="tabs-top">
      <div class="tabs-top-name">
        操作记录
      </div>
    </div>
    <div class="hang">
      <div class="flesx">
        <span class="qdName">操作人名称：</span>
        <Input v-model="name" placeholder="请输入操作人名称" class="qdselect"/>
      </div>
      <div class="flesx">
        <span class="qdName">操作说明：</span>
        <Input v-model="operation" placeholder="请输入操作说明" class="qdselect"/>
      </div>
      <div class="flesx">
        <span class="qdName">操作类型：</span>
        <Select v-model="operationCode" filterable clearable class="qdselect">
          <Option v-for="item in taskoperationList" :value="item.value" :key="item.value">{{ item.label }}</Option>
        </Select>
      </div>
    </div>
    <div class="hang">
      <div class="flesx">
        <span class="qdName">开始时间：</span>
        <DatePicker type="datetime" v-model="startTime" format="yyyy-MM-dd HH:mm" @on-change="handleChange1"
                    placeholder="请选择开始时间"
                    class="qdselect"></DatePicker>
      </div>
      <div class="flesx">
        <span class="qdName">结束时间：</span>
        <DatePicker type="datetime" v-model="endTime" format="yyyy-MM-dd HH:mm"  @on-change="handleChange2"
                    placeholder="请选择结束时间"
                    class="qdselect"></DatePicker>
      </div>
      <div class="flesx">
        <Button type="primary" class="subtj" @click="record">查询</Button>
      </div>
    </div>
    <Table border stripe :columns="columns" :data="datas"></Table>
    <div class="page">
      <Page :total="tots" show-elevator show-total show-sizer  :page-size-opts="sizes"  :page-size="limit"
            @on-change="pageChange" @on-page-size-change="pageSize"/>
    </div>
    <Modal
      v-model="modal1"
      title="操作记录"
      @on-ok="ok"
      @on-cancel="oks">
      <div class="table-task" v-bind="edit">
        <div class="task-cz">
          <span class="task-cz-name">
            id：
          </span>
          <!--<div class="task-cz-count">{{edit.id}}</div>-->
          <Input   placeholder="id" v-model="edit.id" style="width: auto"/>
        </div>
        <div class="task-cz">
          <span class="task-cz-name">
            操作人：
          </span>
          <!--<div class="task-cz-count">{{edit.name}}</div>-->
          <Input  placeholder="id" v-model="edit.name" style="width: auto"/>
        </div>
        <div class="task-cz">
          <span class="task-cz-name">
            操作说明：
          </span>
          <!--<div class="task-cz-count">{{edit.operation}}</div>-->
          <Input   placeholder="id" v-model="edit.operation" style="width: auto"/>
        </div>
        <div class="task-cz">
          <span class="task-cz-name">
            操作类型：
          </span>
          <!--<div class="task-cz-count">{{edit.operationCode}}</div>-->
          <Input  placeholder="id" v-model="edit.operationCode" style="width: auto"/>
        </div>
        <div class="task-cz">
          <span class="task-cz-name">
            操作前：
          </span>
          <!--<textarea ></textarea>-->
          <Input v-model="edit.beforeJson" :autosize="{minRows: 2,maxRows: 10}" style="width: 358px;margin-left: 100px;display: inline-block"  type="textarea"  />
          <!--<div class="task-cz-count">{{edit.beforeJson}}</div>-->
          <!--<Input prefix="ios-star" disabled placeholder="id" v-model="edit.operationCode" style="width: auto"/>-->
        </div>
        <div class="task-cz">
          <span class="task-cz-name">
            操作后：
          </span>
          <Input v-model="edit.afterJson" :autosize="{minRows: 2,maxRows: 10}"  style="width: 358px;margin-left: 100px;display: inline-block" type="textarea"  />
          <!--<div class="task-cz-count">{{edit.afterJson}}</div>-->
          <!--<Input prefix="ios-star" disabled placeholder="id" v-model="edit.operationCode" style="width: auto"/>-->
        </div>
        <div class="task-cz">
          <span class="task-cz-name">
            操作时间：
          </span>
          <!--<div class="task-cz-count">{{edit.cteateTime}}</div>-->
          <Input  placeholder="id" v-model="edit.cteateTime" style="width: auto"/>
        </div>
      </div>
    </Modal>
  </div>
</template>

<script>
    export default {
        data() {
            return {
              modal1:false,
              operation:'',
              name:'',
              operationCode:'',
              taskoperationList:[
                {
                  value: 'save',
                  label: '保存'
                },
                {
                  value: 'update',
                  label: '修改'
                },
                {
                  value: 'enable-or-disabled',
                  label: '启用禁用'
                }
              ],
              startTime:'',
              endTime:'',
              page: 1,
              limit: 10,
              sizes: [10, 20, 30, 50, 80, 100],
              datas:[],
              tots:0,
              edit:'',
              columns: [
                {
                  title: '操作人',
                  key: 'name',
                  align: 'center'
                },
                {
                  title: '操作类型',
                  key: 'operationCode',
                  align: 'center',
                  render: (h, params) => {
                    const row = params.row;
                    return h('div', [
                      h('span', {}, this.filter(row.operationCode)),
                    ]);
                  }
                },
                {
                  title: '操作说明',
                  key: 'operation',
                  align: 'center'
                },
                {
                  title: '操作时间',
                  key: 'cteateTime',
                  align: 'center',
                  render: (h, params) => {
                    const row = params.row;
                    return h('div', [
                      h('span', {}, this.times(row.cteateTime / 1000)),
                    ]);
                  }
                },
                {
                  title: '操作',
                  key: 'action',
                  width: 140,
                  align: 'center',
                  render: (h, params) => {
                    return h('div', [
                      h('Button', {
                        props: {
                          type: 'primary',
                          size: 'small'
                        },
                        style: {
                          marginRight: '5px'
                        },
                        on: {
                          click: () => {
                            this.show(params.row.id)
                          }
                        }
                      }, '详情'),
                    ]);
                  }
                }
              ],
            }
        },
        created() {
          this.startTime = new Date(new Date(new Date().toLocaleDateString()).getTime());
          this.endTime = new Date(new Date(new Date().toLocaleDateString()).getTime() + 24 * 60 * 60 * 1000);
          this.record();
        },
        methods: {
          times:function(time){
            var date = new Date(time * 1000);
            var Y = date.getFullYear() + '-';
            var M = (date.getMonth() + 1 < 10 ? '0' + (date.getMonth() + 1) : date.getMonth() + 1) + '-';
            var D = date.getDate() + ' ';
            var h = date.getHours() + ':';
            var m = date.getMinutes() + ':';
            var s = date.getSeconds();

            if(D < 10){
              D = "0" + D;
            }
            return Y + M + D +h+m+s
          },
          ok:function(){

          },
          oks:function(){

          },
          handleChange1: function (e) {
            // this.startTime = e;
          },
          handleChange2: function (e) {
            // this.endTime = e;
          },
          show:function(i){
            // console.log(i)
            this.edit = '';
            this.$http({
              method: 'get',
              url: this.url + '/v1/operateRecord/getRecordById/'+i,
              data: {},
              success: ((res) => {
                // console.log(res)
                if (res.data.code == 20000) {
                  let k = res.data.data;
                  k.operationCode = this.filter(k.operationCode);
                  k.cteateTime = this.times(k.cteateTime/1000)
                  this.edit = k;
                  this.modal1 = true;
                } else if (res.data.code == 20003) {

                } else if (res.data.code == 4001) {
                  this.$router.push({path: '/login'});
                } else {
                  this.$Message.warning(res.data.msg);
                }
              }),
              error: function (err) {
                console.log(err);
              }
            })
          },
          record:function () {
            this.operationCode = ((this.operationCode == 'undefined' || this.operationCode == undefined) ? '' : this.operationCode);
            let t1 = this.startTime.getFullYear() + '-' + (this.startTime.getMonth() + 1) + '-' + this.startTime.getDate()+' '+this.startTime.getHours()+':'+this.startTime.getMinutes()
            let t2 = this.endTime.getFullYear() + '-' + (this.endTime.getMonth() + 1) + '-' + this.endTime.getDate()+' '+this.endTime.getHours()+':'+this.endTime.getMinutes()
            this.$http({
              method: 'get',
              url: this.url + '/v1/operateRecord/findPageList?page='+this.page+'&limit='+this.limit+'&startTime='+t1+'&endTime='+t2+'&name='+this.name+'&operation='+this.operation+'&operationCode='+this.operationCode,
              data: {},
              success: ((res) => {
                // console.log(res)
                if (res.data.code == 20000) {
                  this.tots = res.data.count;
                  this.datas = res.data.data;
                  // console.log(this.taskTypeSelect)
                } else if (res.data.code == 20003) {
                  this.tots = 0;
                  this.datas = [];
                } else if (res.data.code == 4001) {
                  this.$router.push({path: '/login'});
                } else {
                  this.$Message.warning(res.data.msg);
                }
              }),
              error: function (err) {
                console.log(err);
              }
            })
          },
          pageChange: function (e) {
            this.page = e;
            this.record()
          },
          pageSize: function (e) {
            this.limit = e;
            this.page = 1;
            this.record()
          },
          filter: function (i) {
            if (i == 'save') {
              return '保存'
            } else if(i == 'update'){
              return '修改'
            } else if(i == 'enable-or-disabled'){
              return '启用禁用'
            }
          },
        }
    }
</script>

<style scoped lang="less">
  .tabs {
    width: 100%;
    height: 100%;
    background-color: #f6f6f6;
    padding: 10px;
    .tabs-top {
      width: 100%;
      height: 50px;
      line-height: 40px;
      border-bottom: 1px solid #cccccc;
      margin-bottom: 10px;
      .tabs-top-name {
        font-size: 18px;
        float: left;
      }
      .tabs-top-addTask {
        float: right;
      }
    }
  }
  .hang {
    display: flex;
    width: 100%;
    overflow: hidden;
    margin-bottom: 12px;
    .flesx {
      flex: 1;
    }
    .qdName {
      display: block;
      float: left;
      line-height: 30px;
      width: 100px;
      text-align: right;
      letter-spacing: 2px;
    }
    .qdselect, .start {
      display: block;
      float: left;
      width: 200px;
      margin-right: 30px;
    }
  }
  .page {
    padding-top: 20px;
  }
  .table-task {
    .task-cz {
      margin-bottom: 8px;
      .task-cz-name {
        font-size: 12px;
        width: 100px;
        text-align: right;
        display: inline-block;
      }
      .task-cz-count{
        width: 300px;
        /*text-align: right;*/
        display: inline-block;
      }
    }
  }
</style>
